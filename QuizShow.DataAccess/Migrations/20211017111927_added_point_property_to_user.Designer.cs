// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizShow.DataAccess;

namespace QuizShow.DataAccess.Migrations
{
    [DbContext(typeof(QuizShowContext))]
    [Migration("20211017111927_added_point_property_to_user")]
    partial class added_point_property_to_user
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("QuizShow.Entities.Concrete.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("answer_question_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("QuizShow.Entities.Concrete.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<string>("Content")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("question_content");

                    b.HasKey("Id");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("QuizShow.Entities.Concrete.QuestionRightAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_right_answer_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int>("RightAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("right_answer_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RightAnswerId");

                    b.ToTable("question_right_answer");
                });

            modelBuilder.Entity("QuizShow.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_firstname");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_lastname");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_password");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("user_point");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("user_username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("QuizShow.Entities.Concrete.Answer", b =>
                {
                    b.HasOne("QuizShow.Entities.Concrete.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizShow.Entities.Concrete.QuestionRightAnswer", b =>
                {
                    b.HasOne("QuizShow.Entities.Concrete.Question", "Question")
                        .WithMany("QuestionRightAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizShow.Entities.Concrete.Answer", "RightAnswer")
                        .WithMany("QuestionRightAnswers")
                        .HasForeignKey("RightAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("RightAnswer");
                });

            modelBuilder.Entity("QuizShow.Entities.Concrete.Answer", b =>
                {
                    b.Navigation("QuestionRightAnswers");
                });

            modelBuilder.Entity("QuizShow.Entities.Concrete.Question", b =>
                {
                    b.Navigation("QuestionRightAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
